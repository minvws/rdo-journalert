#!/usr/bin/env python3
import os
import sys
import time
import re
import yaml
from systemd import journal
from systemd import daemon
from datetime import datetime, timedelta
from rapidfuzz import process, fuzz, utils
from multiprocessing import Pool
import multiprocessing
import signal
import statistics


class SettingsClass:
    def __init__(self, settings):
        for k, v in settings.items():
            setattr(self, k, v)


class LogClass:
    def __init__(self, settings):
        self.settings = settings
        self.logfile = None
        self.set_log_file()
        self._check_writable_log_file()

    def set_log_file(self):
        if self.settings.learning_mode:
            self.logfile = self.settings.output_log_file_learning_mode
        else:
            self.logfile = self.settings.output_log_file

    def write_logs(self, events):
        today = datetime.today().strftime("%Y_%m_%d")
        with open(f"{self.logfile}_{today}", "a") as f:
            for event in events:
                f.write(
                    f"{event.timestamp},{event.hostname},{event.known},{event.score},{event.raw_message}\n"
                )

    def _check_writable_log_file(self):
        today = datetime.today().strftime("%Y_%m_%d")
        with open(f"{self.logfile}_{today}", "a+") as f:
            pass


class LogAllowList:
    def __init__(self, settings):
        self.settings = settings
        self.events = []
        self.stored_messages = []
        self.allow_list = None
        self.allow_list_forced = None
        self._check_writable_allow_list()
        self.load_message_allow_lists()

    def _load_message_allow_list(self, allow_list_file):
        if os.path.exists(allow_list_file):
            with open(allow_list_file, "r") as f:
                return f.read().splitlines()

    def load_message_allow_lists(self):
        self.allow_list = self._load_message_allow_list(self.settings.allow_list)
        self.allow_list_forced = self._load_message_allow_list(
            self.settings.allow_list_forced
        )

    def update_allow_list(self, events):
        written_events_hashes = []
        written_events_sanitized = []
        with open(self.settings.allow_list, "a+") as f:
            with open(self.settings.allow_list_human_readable, "a+") as d:
                for event in events:
                    if (
                        event.sanitized_message not in self.allow_list
                        and event.message_hash not in written_events_hashes
                        and event.sanitized_message not in written_events_sanitized
                    ):
                        written_events_hashes.append(event.message_hash)
                        written_events_sanitized.append(event.sanitized_message)
                        f.write(f"{event.sanitized_message}\n")
                        d.write(f"{event.hostname} | {event.raw_message}\n")

    def _check_writable_allow_list(self):
        with open(self.settings.allow_list, "a+") as f:
            pass


class LogEventClass:
    def __init__(self, settings, event, allow_list_obj):
        self.settings = settings
        self.event = event
        self.hostname = None
        self.allow_list_obj = allow_list_obj
        self.error = None
        self.score = None
        self.score_forced = None
        self.known = False
        self.raw_message = None
        self.sanitized_message = None
        self.timestamp = None
        self.message_hash = None
        self.message_length = 0
        # self.debug = None
        self.initialize()

    def process_event_timestamps(self):
        fields = [
            "_SOURCE_REALTIME_TIMESTAMP",
            "_REALTIME_TIMESTAMP",
            "__REALTIME_TIMESTAMP",
            "SYSLOG_TIMESTAMP",
        ]
        self.timestamp = [
            self.event[key] for key in self.event.keys() if key in fields
        ][0]

    def initialize(self):
        try:
            self.raw_message = self.event["MESSAGE"]
            self.message_length = len(self.raw_message)
        except TypeError:
            print(f"Log message contains bad characters: {self.raw_message}")
        try:
            self.hostname = self.event["_HOSTNAME"]
        except KeyError:
            print(f"Log message has no hostname")
        self.process_event_timestamps()
        self.event = None

    def sanitize_data(self, data):
        sanitized = remove_number_from_string(data).lower().strip()
        sanitized = "".join(e for e in sanitized if e.isalpha())
        sanitized = re.sub("\s\s+", "", sanitized)[: self.settings.log_size_max_bytes]
        return sanitized

    def sanitize_event(self):
        self.sanitized_message = self.sanitize_data(self.raw_message)
        self.message_hash = hash(f"{self.hostname} {self.sanitized_message}")

    def contains_error(self):
        self.error = any(x in self.raw_message for x in self.settings.keywords)

    def score_event(self):
        if self.error:
            scorer = fuzz.ratio
            self.score = round(
                process.extractOne(
                    self.sanitized_message,
                    self.allow_list_obj.allow_list,
                    scorer=scorer,
                )[1],
                2,
            )
            self.score_forced = 0
            for line in self.allow_list_obj.allow_list_forced:
                if self.sanitize_data(line) in self.sanitized_message:
                    self.score_forced = 100

    def determine_if_known_event(self):
        if self.error:
            if self.score >= self.settings.fuzzy_threshold_percent:
                self.known = True
            if self.score_forced >= self.settings.fuzzy_threshold_percent_forced:
                self.known = True


class AlertIcingaClass:
    def __init__(self, settings):
        self.settings = settings
        self.init = True
        self.events = []
        self.hosts = []
        self.message = None
        self.errors_reported = False
        self.timestamp = datetime.now()
        self._check_writable_icinga_file()

    def _generate_hosts_list(self):
        for event in self.events:
            self.hosts.append(event.hostname)
        self.hosts = self.hosts

    def process_events(self, events):
        self.events.extend(events)
        self._generate_hosts_list()
        self._generate_message()
        self._write_to_file()

    def _generate_message(self):
        if self.settings.learning_mode:
            self.message = "OK: Journalert running in learning mode. | errors: 0"
        elif len(self.events) > 0:  # if we have received error events
            number_of_hosts = len(set(self.hosts))
            hosts = list(set(self.hosts))
            hosts = " ".join(hosts[: (self.settings.icinga_max_hosts - 1)])
            self.message = f"Warning: {number_of_hosts} host{'s'[:number_of_hosts^1]} reported errors ({hosts}) | errors: {len(self.events)}"
        else:
            self.message = (
                f"OK: no unknown errors | known errors: {len(self.events)} | errors: 0"
            )

    def _write_to_file(self):
        if (
            is_current_time_outside_last_period(
                self.timestamp, self.settings.icinga_interval_seconds
            )
            or self.init
        ):
            with open(self.settings.icinga_alert_file, "w") as f:
                f.write(f"{self.message}\n")
                self.timestamp = datetime.now()
                self.events = []
                self.init = False

    def _check_writable_icinga_file(self):
        with open(self.settings.icinga_alert_file, "a+") as f:
            pass


class MyDebugLogger:
    def __init__(self, settings):
        self.debug = settings.debug
        self.debug_level = settings.debug_level
        self.messages = []
        if self.debug:
            print(f"Debug level: {self.debug_level}")

    def log(self, message, level):
        if self.debug:
            if level <= self.debug_level:
                self.messages.append(message)

    def print(self):
        if self.debug:
            for message in self.messages:
                print(f"{message}")
            self.messages = []


def remove_number_from_string(event):
    pattern = r"[0-9]"
    return re.sub(pattern, "", event)


def print_startup_messages(settings):
    if settings.debug:
        print("⚠️  DEBUG MODE ENABLED    ⚠️")
    if settings.learning_mode:
        print("⚠️  LEARNING MODE ENABLED ⚠️")
    else:
        print("🚨 ALERT MODE ENABLED    🚨")


def get_journal_events(settings, journal_reader, overlap=0):
    """ We select the messages we want within a specific time frame"""
    window = settings.journal_window_seconds + overlap
    journal_reader.seek_realtime(datetime.now() - (timedelta(seconds=window)))


def is_current_time_outside_last_period(timestamp, age_sec):
    return datetime.now() > timestamp + timedelta(seconds=age_sec)


def calculate_duration_overlap(settings, start, end):
    interval = settings.journal_window_seconds
    duration = end - start
    overlap = (duration * 1.1) + settings.window_overlap_extra_seconds
    if duration > interval:
        sleep_delay = 0
    else:
        sleep_delay = interval - overlap
        if sleep_delay < 0:
            sleep_delay = 0
    return duration, sleep_delay


def sigterm_handler(signal, frame):
    print("Received sigterm, bye!..")
    sys.exit(0)


def process_single_event(event):
    event.sanitize_event()
    event.contains_error()
    event.score_event()
    event.determine_if_known_event()
    return event


def process_events_list(settings, events, allow_list_obj, log):
    event_object_list = []
    result = []

    start = time.time()
    for event in events:
        event_object_list.append(LogEventClass(settings, event, allow_list_obj))
    end = time.time()
    duration = round(end - start, 6)
    log.log(f"Object list: {duration}s", 3)

    start = time.time()
    with Pool(multiprocessing.cpu_count()) as p:
        result = p.map(process_single_event, event_object_list)
        p.close()
        p.join()
        p.terminate
    end = time.time()
    duration = round(end - start, 6)
    log.log(f"Multiprocessing: {duration}s", 3)
    return [item for item in result if item.error]


def get_message_size_statistics(events):
    if len(events) > 0:
        values = [event.message_length for event in events]
    else:
        values = [0]
    return max(values), int(round(statistics.mean(values), 0))


def process_score_stats(score_unknown, score_known, unknown_alerts, known_alerts, log):
    unknown_alerts_score_avg = None
    known_alerts_score_avg = None
    for event in unknown_alerts:
        score_unknown.append(event.score)
    if score_unknown:
        unknown_alerts_score_avg = statistics.mean(score_unknown)
    else:
        unknown_alerts_score_avg = 0
    score_unknown = []
    for event in known_alerts:
        if event.score_forced > event.score:
            score_known.append(event.score_forced)
        else:
            score_known.append(event.score)
    if score_known:
        known_alerts_score_avg = statistics.mean(score_known)
    else:
        known_alerts_score_avg = 0
    score_known = []
    return round(unknown_alerts_score_avg), round(known_alerts_score_avg)


def debug_print_log_lines(settings, unknown_alerts, known_alerts, log):
    if settings.debug:
        if len(unknown_alerts) > 0 and len(unknown_alerts) < 100:
            for event in unknown_alerts:
                log.log(
                    f"{event.hostname:15} Score: {event.score:3} Known: {event.known} {event.score_forced:3} {event.timestamp} {event.message_hash}",
                    1,
                )
                log.log(f"> {event.raw_message[:200]}", 1)
                # log.log(f"DEBUG: {event.debug}", 1)
        if len(known_alerts) > 0 and len(known_alerts) < 10:
            for event in known_alerts:
                log.log(
                    f"{event.hostname:15} Score: {event.score:3} Known: {event.known} {event.score_forced:3} {event.timestamp} {event.message_hash}|",
                    1,
                )
                log.log(f"> {event.raw_message[:200]}", 1)
                # log.log(f"DEBUG: {event.debug}", 1)

def process_log_data_from_systemd(settings, journal_reader):

    allow_list_obj = LogAllowList(settings)
    logger_obj = LogClass(settings)
    icinga_obj = AlertIcingaClass(settings)
    log = MyDebugLogger(settings)

    print_startup_messages(settings)
    daemon.notify("READY=1")

    while True:
        start_run = time.time()  # we measure processing time
        unknown_alerts = []
        known_alerts = []
        known_alerts_hashes = []
        score_known = []
        score_unknown = []
        unknown_alerts_score_avg = None
        known_alerts_score_avg = None

        get_journal_events(settings, journal_reader, settings.window_overlap_extra_seconds)
        events = [event for event in journal_reader] 
        
        processed_events = process_events_list(settings, events, allow_list_obj, log)
        [
            (known_alerts.append(event), known_alerts_hashes.append(event.message_hash))
            for event in processed_events
            if event.known and event.message_hash not in known_alerts_hashes
        ]
        unknown_alerts = [event for event in processed_events if not event.known]
        message_max, message_mean = get_message_size_statistics(processed_events)

        debug_print_log_lines(settings, unknown_alerts, known_alerts, log)

        # Icinga Status Update
        log.log("Updating Icinga alerts", 3)
        icinga_obj.process_events(unknown_alerts)

        # Write unknown errors to log file
        if len(unknown_alerts) > 0:
            log.log("Writing errors to file", 3)
            logger_obj.write_logs(unknown_alerts)

        unknown_alerts_score_avg, known_alerts_score_avg = process_score_stats(
            score_unknown, score_known, unknown_alerts, known_alerts, log
        )

        # In learning mode update allow_list.txt
        if settings.learning_mode:
            if len(unknown_alerts) > 0:
                log.log("update allow list...", 3)
                allow_list_obj.update_allow_list(unknown_alerts)
            allow_list_obj.load_message_allow_lists()

        journal_reader.wait(0)  # Detect new remote host log files
        end_run = time.time()
        duration, sleep_delay = calculate_duration_overlap(settings, start_run, end_run)
        print(
            f"| Events: {len(events):6} | Unknown: {len(unknown_alerts):5} ScoreAvg {unknown_alerts_score_avg:3}% | Known (unique): {len(known_alerts):5} ScoreAvg {known_alerts_score_avg:3}% | Avg size: {message_mean:4} | Max size: {message_max:5} | Processing {'{:.3f}'.format(round(duration,3))}s | Sleeping {'{:.3f}'.format(round(sleep_delay,3))}s |"
        )
        log.print()
        time.sleep(sleep_delay)

def load_settings(config_file="config.yaml"):
    try:
        with open(config_file) as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print(f"Config file {config_file} not found")
        sys.exit(1)


def get_config_file(arg):
    config_file = None
    if len(sys.argv) == 2:
        config_file = sys.argv[1]
    else:
        print(f"Usage {sys.argv[0]} <config filename>")
        sys.exit(1)
    return config_file


def main():
    signal.signal(signal.SIGTERM, sigterm_handler)
    try:
        config_file = get_config_file(sys.argv)
        settings = load_settings(config_file)
        settings = SettingsClass(settings)
        journal_reader = journal.Reader(path=settings.journal_remote_directory)
        process_log_data_from_systemd(settings, journal_reader)
    except KeyboardInterrupt:
        journal_reader.close()
        print("Keyboard control-c")


if __name__ == "__main__":
    main()
